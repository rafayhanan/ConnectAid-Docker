pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_PROJECT = 'cicd-connectaid'
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        MONGODB_URI = credentials('MONGODB_URI')
        JWT_SECRET = credentials('JWT_SECRET')
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from GitHub repository
                checkout scm
            }
        }

        stage('Setup Environment') {
            steps {
                dir('ConnectAid') {
                    sh '''
                        cat > back-end/.env << EOF
NODE_ENV=production
PORT=5000
MONGODB_URI=${MONGODB_URI}
JWT_SECRET=${JWT_SECRET}
JWT_EXPIRATION=24h
EOF
                    '''
                }
            }
        }

        stage('Build and Start Containers') {
            steps {
                dir('ConnectAid') {
                    script {
                        // Check if containers are already running
                        def containersRunning = sh(
                            script: 'docker-compose -p ${DOCKER_COMPOSE_PROJECT} -f ${DOCKER_COMPOSE_FILE} ps -q | wc -l',
                            returnStdout: true
                        ).trim()
                        
                        if (containersRunning != '0') {
                            echo "Containers are running. Stopping gracefully..."
                            sh 'docker-compose -p ${DOCKER_COMPOSE_PROJECT} -f ${DOCKER_COMPOSE_FILE} down'
                        }
                        
                        // Build with cache (much faster for incremental changes)
                        echo "Building containers with cache optimization..."
                        sh 'docker-compose -p ${DOCKER_COMPOSE_PROJECT} -f ${DOCKER_COMPOSE_FILE} build'
                        
                        // Start containers
                        echo "Starting containers..."
                        sh 'docker-compose -p ${DOCKER_COMPOSE_PROJECT} -f ${DOCKER_COMPOSE_FILE} up -d'
                        
                        // Clean up dangling images to save space (optional)
                        sh 'docker image prune -f || true'
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                // Verify containers are up
                sh 'docker ps | grep cicd-connectaid'

                // Allow startup time
                sh 'sleep 10'

                // Test backend response
                sh 'curl -s http://localhost:5002 || true'
                
                // Test frontend response
                sh 'curl -s http://localhost:82 || true'
            }
        }

        stage('Setup Test Environment') {
            steps {
                dir('ConnectAid/selenium_tests') {
                    // Make setup script executable and run it
                    sh 'chmod +x jenkins_setup.sh'
                    sh './jenkins_setup.sh'
                }
            }
        }

        stage('Run Selenium Tests') {
            steps {
                dir('ConnectAid/selenium_tests') {
                    script {
                        try {
                            // Run the test suite with proper environment
                            sh '''
                                export DISPLAY=:99
                                python3 -m pytest test_connectaid_suite.py \
                                    --html=test_report.html \
                                    --self-contained-html \
                                    -v \
                                    --tb=short \
                                    --maxfail=5
                            '''
                            echo "✅ All tests passed successfully!"
                        } catch (Exception e) {
                            // Mark build as unstable if tests fail but allow pipeline to continue
                            currentBuild.result = 'UNSTABLE'
                            echo "⚠️ Some tests failed: ${e.getMessage()}"
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment and Testing successful!'
        }
        failure {
            echo 'Pipeline failed!'
            // Stop containers if failure
            sh 'docker-compose -p ${DOCKER_COMPOSE_PROJECT} -f ${DOCKER_COMPOSE_FILE} down || true'
        }
        unstable {
            echo 'Deployment successful but tests failed!'
        }
        always {
            // Archive test reports
            archiveArtifacts artifacts: 'ConnectAid/selenium_tests/test_report.html', allowEmptyArchive: true
            archiveArtifacts artifacts: 'ConnectAid/selenium_tests/reports/*', allowEmptyArchive: true
            archiveArtifacts artifacts: 'ConnectAid/selenium_tests/screenshots/*', allowEmptyArchive: true
            
            // Archive docker-compose logs (if any)
            archiveArtifacts artifacts: 'ConnectAid/docker-compose.log', allowEmptyArchive: true
            
            // Publish HTML test reports
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'ConnectAid/selenium_tests',
                reportFiles: 'test_report.html',
                reportName: 'Selenium Test Report'
            ])
        }
    }
}
