pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_PROJECT = 'cicd-connectaid'
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        MONGODB_URI = credentials('MONGODB_URI')
        JWT_SECRET = credentials('JWT_SECRET')
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from GitHub repository
                checkout scm
            }
        }

        stage('Setup Environment') {
            steps {
                dir('ConnectAid') {
                    sh '''
                        cat > back-end/.env << EOF
NODE_ENV=production
PORT=5000
MONGODB_URI=${MONGODB_URI}
JWT_SECRET=${JWT_SECRET}
JWT_EXPIRATION=24h
EOF
                    '''
                }
            }
        }

        stage('Build and Start Containers') {
            steps {
                dir('ConnectAid') {
                    // Build and start Docker containers
                    sh 'docker-compose -p ${DOCKER_COMPOSE_PROJECT} -f ${DOCKER_COMPOSE_FILE} build'
                    sh 'docker-compose -p ${DOCKER_COMPOSE_PROJECT} -f ${DOCKER_COMPOSE_FILE} up -d'
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                // Verify containers are up
                sh 'docker ps | grep cicd-connectaid'

                // Allow startup time
                sh 'sleep 10'

                // Test backend response
                sh 'curl -s http://localhost:5002 || true'
            }
        }
    }

    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
            // Stop containers if failure
            sh 'docker-compose -p ${DOCKER_COMPOSE_PROJECT} -f ${DOCKER_COMPOSE_FILE} down || true'
        }
        always {
            // Archive docker-compose logs (if any)
            archiveArtifacts artifacts: 'ConnectAid/docker-compose.log', allowEmptyArchive: true
        }
    }
}
